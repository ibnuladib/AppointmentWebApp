@model List<AppointmentWebApp.Models.TransactionCount>

@if (Model == null || !Model.Any())
{
    <p>No transaction data available.</p>
}
else
{
    <div style="width: 600px; height: 300px;">
        <canvas id="transactionsChart"></canvas>
    </div>
}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('transactionsChart').getContext('2d');

    // Define a single shade of blue with varying opacities for subtle differentiation
    var baseColor = 'rgba(54, 162, 235, 1)'; // Darker Blue

    // Opacity values to create slight variations for different bars
    var opacities = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9];

    // Create background color array with different opacities based on the count of transactions
    var backgroundColors = Array.from({ length: 7 }, (_, index) => `rgba(54, 162, 235, ${opacities[index]})`);
    var borderColors = backgroundColors.map(color => color.replace('0.4', '1').replace('0.5', '1').replace('0.6', '1').replace('0.7', '1').replace('0.8', '1').replace('0.9', '1'));

    // Data arrays from your model
    var labels = @Html.Raw(Json.Serialize(Model.Select(ac => ac.Date.ToString("MM/dd")).ToList()));  // Dates
    var transactionCounts = @Html.Raw(Json.Serialize(Model.Select(ac => ac.Count).ToList()));        // Transaction Counts
    var totalEarnings = @Html.Raw(Json.Serialize(Model.Select(ac => ac.TotalEarnings).ToList()));    // Total Earnings

    var transactionsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Total Transactions',
                data: transactionCounts,
                // Apply single base color with varying opacities for a consistent look
                backgroundColor: backgroundColors.slice(0, transactionCounts.length),
                borderColor: borderColors.slice(0, transactionCounts.length),
                borderWidth: 2
            }]
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        autoSkip: false, // Ensure labels are not skipped
                        maxRotation: 0,  // Force labels to display horizontally
                        minRotation: 0,  // Force labels to display horizontally
                    }
                },
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: true, // Show the legend if needed
                    position: 'top'
                },
                tooltip: {
                    enabled: true,
                    callbacks: {
                        // Custom tooltip display to show Total Earnings
                        label: function (tooltipItem) {
                            var transactionCount = transactionCounts[tooltipItem.dataIndex];
                            var earnings = totalEarnings[tooltipItem.dataIndex].toLocaleString('en-US', { style: 'currency', currency: 'BDT', currencyDisplay: 'symbol' });
                            return `Transactions: ${transactionCount}, Earnings: ${earnings}`;
                        }
                    }
                }
            }
        }
    });
</script>



