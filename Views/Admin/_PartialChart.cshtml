@model List<AppointmentWebApp.Models.TransactionCount>

@if (Model == null || !Model.Any())
{
    <p>No transaction data available.</p>
}
else
{
    <div style="width: 600px; height: 300px;">
        <canvas id="transactionsChart"></canvas>
    </div>
}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('transactionsChart').getContext('2d');

        // Define an array of different shades of blue for styling
        var backgroundColors = [
            'rgba(54, 162, 235, 0.6)', // Light Blue
            'rgba(75, 192, 192, 0.6)', // Cyan
            'rgba(153, 102, 255, 0.6)', // Purple Blue
            'rgba(99, 130, 255, 0.6)',  // Soft Blue
            'rgba(54, 162, 235, 0.6)',  // Deep Sky Blue
            'rgba(75, 146, 219, 0.6)',  // Medium Blue
            'rgba(30, 144, 255, 0.6)'   // Dodger Blue
        ];

        var borderColors = backgroundColors.map(color => color.replace('0.6', '1')); // Use same colors for borders with higher opacity

        // Get labels and data from the model
        var labels = @Html.Raw(Json.Serialize(Model.Select(ac => ac.Date.ToString("MM/dd")).ToList()));  // Dates
        var transactionCounts = @Html.Raw(Json.Serialize(Model.Select(ac => ac.Count).ToList()));        // Transaction Counts
        var totalEarnings = @Html.Raw(Json.Serialize(Model.Select(ac => ac.TotalEarnings).ToList()));    // Total Earnings

        var transactionsChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Transactions',
                    data: transactionCounts,
                    borderColor: borderColors,
                    backgroundColor: backgroundColors,
                    borderWidth: 2
                }]
            },
            options: {
                scales: {
                    x: {
                        ticks: {
                            autoSkip: false, // Ensure labels are not skipped
                            maxRotation: 0,  // Force labels to display horizontally
                            minRotation: 0,  // Force labels to display horizontally
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true, // Show the legend if needed
                        position: 'top'
                    },
                    tooltip: {
                        enabled: true,
                        callbacks: {
                            // Custom tooltip display to show Total Earnings
                            label: function (tooltipItem) {
                                var transactionCount = transactionCounts[tooltipItem.dataIndex];
                                var earnings = totalEarnings[tooltipItem.dataIndex].toLocaleString('en-US', { style: 'currency', currency: 'BDT', currencyDisplay: 'symbol' });
                                return `Transactions: ${transactionCount}, Earnings: ${earnings}`;
                            }
                        }
                    }
                }
            }
        });
    </script>

